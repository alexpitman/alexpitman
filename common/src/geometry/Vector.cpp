#include "geometry/Vector.h"
///////////////////////////////////////////////////////////////////////////////
//
// Name           : Vector2D
// Inheritance    : Base struct 
// Desctription   : See header.
//
///////////////////////////////////////////////////////////////////////////////

#include <math.h>

///////////////////////////////////////////////////////////////////////////////
Vector2D::Vector2D() {}

///////////////////////////////////////////////////////////////////////////////
Vector2D::Vector2D(const double X, const double Y)
{
  myX = X;
  myY = Y;
}

///////////////////////////////////////////////////////////////////////////////
Vector2D&
Vector2D::operator =(const Vector2D& RHS)
{
  myX = RHS.X();
  myY = RHS.Y();
  return *this;
}

///////////////////////////////////////////////////////////////////////////////
Vector2D
Vector2D::operator +(const Vector2D& RHS) const
{
  return Vector2D( myX + RHS.X(), myY + RHS.Y() );
}

///////////////////////////////////////////////////////////////////////////////
Vector2D
Vector2D::operator -(const Vector2D& RHS) const
{
  return Vector2D( myX - RHS.X(), myY - RHS.Y() );
}

///////////////////////////////////////////////////////////////////////////////
Vector2D& 
Vector2D::operator +=(const Vector2D& RHS)
{
  myX += RHS.X();
  myY += RHS.Y();
  return *this; 
}

///////////////////////////////////////////////////////////////////////////////
Vector2D& 
Vector2D::operator -=(const Vector2D& RHS)
{
  myX -= RHS.X();
  myY -= RHS.Y();
  return *this;
}

///////////////////////////////////////////////////////////////////////////////
bool 
Vector2D::operator ==(const Vector2D& RHS) const
{
  return ( myX == RHS.X() && myY == RHS.Y() );
}

///////////////////////////////////////////////////////////////////////////////
double 
Vector2D::Length() const
{
  return sqrt( LengthSquared() );
}

///////////////////////////////////////////////////////////////////////////////
double 
Vector2D::LengthSquared() const
{
  return myX * myX + myY * myY;
}

///////////////////////////////////////////////////////////////////////////////
Vector2D& 
Vector2D::Zero()
{
  static Vector2D vec(0, 0);
  return vec;
}

///////////////////////////////////////////////////////////////////////////////
Vector2D& 
Vector2D::UnitX()
{
  static Vector2D vec(1, 0);
  return vec;
}

///////////////////////////////////////////////////////////////////////////////
Vector2D& 
Vector2D::UnitY()
{
  static Vector2D vec(0, 1);
  return vec;
}

///////////////////////////////////////////////////////////////////////////////
bool 
Vector2D::operator !=(const Vector2D& RHS) const
{
  return !operator==(RHS);
}

///////////////////////////////////////////////////////////////////////////////
//
// Name           : Vector3D
// Inheritance    : Base struct 
// Desctription   : See header.
//
///////////////////////////////////////////////////////////////////////////////

Vector3D::Vector3D() {};

///////////////////////////////////////////////////////////////////////////////
Vector3D::Vector3D(double X, double Y, double Z)
{
  myX = X;
  myY = Y;
  myZ = Z;
}

///////////////////////////////////////////////////////////////////////////////
Vector3D&
Vector3D::operator =(const Vector3D& RHS)
{
  myX = RHS.X();
  myY = RHS.Y();
  myZ = RHS.Z();
  return *this;
}

///////////////////////////////////////////////////////////////////////////////
Vector3D
Vector3D::operator +(const Vector3D& RHS) const
{
  return Vector3D( myX + RHS.X(), myY + RHS.Y(), myZ + RHS.Z() );
}

///////////////////////////////////////////////////////////////////////////////
Vector3D
Vector3D::operator -(const Vector3D& RHS) const
{
  return Vector3D( myX - RHS.X(), myY - RHS.Y(), myZ - RHS.Z() );
}

///////////////////////////////////////////////////////////////////////////////
Vector3D 
Vector3D::operator *(double RHS) const
{
  return Vector3D( myX*RHS, myY*RHS, myZ*RHS );
}
 
///////////////////////////////////////////////////////////////////////////////
Vector3D 
Vector3D::operator /(double RHS) const
{
  return Vector3D( myX/RHS, myY/RHS, myZ/RHS );
}

///////////////////////////////////////////////////////////////////////////////
Vector3D& 
Vector3D::operator +=(const Vector3D& RHS)
{
  myX += RHS.X();
  myY += RHS.Y();
  myZ += RHS.Z();
  return *this; 
}

///////////////////////////////////////////////////////////////////////////////
Vector3D& 
Vector3D::operator -=(const Vector3D& RHS)
{
  myX -= RHS.X();
  myY -= RHS.Y();
  myZ -= RHS.Z();
  return *this;   
}

///////////////////////////////////////////////////////////////////////////////
bool 
Vector3D::operator ==(const Vector3D& RHS) const
{
  return ( myX == RHS.X() && myY == RHS.Y() && myZ == RHS.Z() );
}

///////////////////////////////////////////////////////////////////////////////
bool 
Vector3D::operator !=(const Vector3D& RHS) const
{
  return !operator==(RHS);
}

///////////////////////////////////////////////////////////////////////////////
Vector3D 
Vector3D::operator *(const Vector3D& RHS) const
{
  return Vector3D( myY*RHS.Z() - myZ*RHS.Y(),
                   myX*RHS.Z() - myZ*RHS.X(),
                   myY*RHS.X() - myX*RHS.Y() );
}

///////////////////////////////////////////////////////////////////////////////
double 
Vector3D::Length() const
{
  return sqrt( LengthSquared() );
}
  
///////////////////////////////////////////////////////////////////////////////
double 
Vector3D::LengthSquared() const
{
  return myX * myX + myY * myY + myZ * myZ;
}

///////////////////////////////////////////////////////////////////////////////
void 
Vector3D::Normalise()
{
  double length = Length();
  
  if ( length == 0 )
  {
    *this = Vector3D::Null();
    return;
  }
  
  myX /= length;
  myY /= length;
  myZ /= length;
}

///////////////////////////////////////////////////////////////////////////////
Vector3D& 
Vector3D::Zero()
{
  static Vector3D vec(0, 0, 0);
  return vec;
}

///////////////////////////////////////////////////////////////////////////////
Vector3D& 
Vector3D::Null()
{
  static Vector3D vec;
  return vec;
}

///////////////////////////////////////////////////////////////////////////////
Vector3D& 
Vector3D::UnitX()
{
  static Vector3D vec(1, 0, 0);
  return vec;
}

///////////////////////////////////////////////////////////////////////////////
Vector3D& 
Vector3D::UnitY()
{
  static Vector3D vec(0, 1, 0);
  return vec;
}

///////////////////////////////////////////////////////////////////////////////
Vector3D& 
Vector3D::UnitZ()
{
  static Vector3D vec(0, 0, 1);
  return vec;
}
